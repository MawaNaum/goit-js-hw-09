{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAsBA,MAAMC,EAAOC,SAASC,cAAc,SAuBpC,SAASC,EAAcC,EAAUC,GAW/B,OAVgB,IAAIC,SAAQ,CAACC,EAAKC,KAChC,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAI,uBAAqBH,QAAiBC,OAExCG,EAAE,sBAAoBJ,QAAeC,MAAU,GAElDA,EAAM,G,CA/BbL,EAAKa,iBAAiB,UAEtB,SAAiBC,GACfA,EAAIC,iBACJ,IAAIC,EAAaC,OAAOjB,EAAKkB,SAASb,MAAMc,OAC5C,MAAMC,EAAYH,OAAOjB,EAAKkB,SAASG,KAAKF,OACtCG,EAAcL,OAAOjB,EAAKkB,SAASK,OAAOJ,OAChDnB,EAAKwB,QAEL,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAaG,GAAK,EACrCtB,EAAcsB,EAAGT,GACdU,MAAKnB,IACJoB,EAAA7B,GAAS8B,OAAOC,QAAQtB,EAAI,IAE7BuB,OAAMtB,IACLmB,EAAA7B,GAAS8B,OAAOG,QAAQvB,EAAI,IAGhCQ,GAAcI,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, сколько ввели в поле amount. При каждом вызове передай ей номер создаваемого промиса (position) и задержку учитывая введенную пользователем первую задержку (delay) и шаг (step).\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется через delay времени. Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров. Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onClick);\n\nfunction onClick(evt) {\n  evt.preventDefault();\n  let delayValue = Number(form.elements.delay.value);\n  const stepValue = Number(form.elements.step.value);\n  const amountValue = Number(form.elements.amount.value);\n  form.reset();\n\n  for (let i = 1; i <= amountValue; i += 1) {\n    createPromise(i, delayValue)\n      .then(res => {\n        Notiflix.Notify.success(res);\n      })\n      .catch(rej => {\n        Notiflix.Notify.failure(rej);\n      });\n    \n    delayValue += stepValue;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((res, rej) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        res(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        rej(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n  return promise;\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","res","rej","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","delayValue","Number","elements","value","stepValue","step","amountValue","amount","reset","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.ed0671a1.js.map"}